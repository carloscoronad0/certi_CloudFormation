AWSTemplateFormatVersion: '2010-09-09'
Transform:
- AWS::Serverless-2016-10-31
Description: In Class Practice
Resources:
  GetMovie:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getMovie
      Handler: theater.getMovie
      Runtime: python3.6
      CodeUri: s3://lambda-cloudformation-lab/2bc3c3dc1bea8ce3d301af3055c086cf
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyMovieTheaterTable
      Environment:
        Variables:
          MOVIES_TABLE:
            Ref: MyMovieTheaterTable
      Events:
        GetMovieInfo:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyMovieTheaterAPI
            Path: /movies/{movie_id}
            Method: GET
  RoomsPerDay:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: roomsPerDay
      Handler: theater.roomsPerDay
      Runtime: python3.6
      CodeUri: s3://lambda-cloudformation-lab/2bc3c3dc1bea8ce3d301af3055c086cf
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyMovieTheaterTable
      Environment:
        Variables:
          MOVIES_TABLE:
            Ref: MyMovieTheaterTable
      Events:
        GetRoomPerDayInfo:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyMovieTheaterAPI
            Path: /roomsPerDay/movies/{movie_id}
            Method: GET
  GetRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getRoom
      Handler: theater.getRoom
      Runtime: python3.6
      CodeUri: s3://lambda-cloudformation-lab/2bc3c3dc1bea8ce3d301af3055c086cf
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyMovieTheaterTable
      Environment:
        Variables:
          MOVIES_TABLE:
            Ref: MyMovieTheaterTable
      Events:
        GetRoomInfo:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyMovieTheaterAPI
            Path: /rooms/{room_id}
            Method: GET
  GetPersonMoviesWatched:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getPersonMoviesWatched
      Handler: theater.getPersonMoviesWatched
      Runtime: python3.6
      CodeUri: s3://lambda-cloudformation-lab/2bc3c3dc1bea8ce3d301af3055c086cf
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyMovieTheaterTable
      Environment:
        Variables:
          MOVIES_TABLE:
            Ref: MyMovieTheaterTable
      Events:
        getPersonMoviesWatchedInfo:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyMovieTheaterAPI
            Path: /persons/{person_id}
            Method: GET
  GetPeopleAssist:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getPeopleAssist
      Handler: theater.getPeopleAssist
      Runtime: python3.6
      CodeUri: s3://lambda-cloudformation-lab/2bc3c3dc1bea8ce3d301af3055c086cf
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyMovieTheaterTable
      Environment:
        Variables:
          MOVIES_TABLE:
            Ref: MyMovieTheaterTable
      Events:
        getPeopleAssistInfo:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyMovieTheaterAPI
            Path: /movies/{movie_id}/rooms/{room_id}
            Method: GET
  PutMovie:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: putMovie
      Handler: theater.putMovie
      Runtime: python3.6
      CodeUri: s3://lambda-cloudformation-lab/2bc3c3dc1bea8ce3d301af3055c086cf
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: MyMovieTheaterTable
      Environment:
        Variables:
          MOVIES_TABLE:
            Ref: MyMovieTheaterTable
      Events:
        PutMovieInfo:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyMovieTheaterAPI
            Path: /movies/{movie_id}
            Method: PUT
  PutPersons:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: putPersons
      Handler: theater.putPersonsToMovie
      Runtime: python3.6
      CodeUri: s3://lambda-cloudformation-lab/2bc3c3dc1bea8ce3d301af3055c086cf
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: MyMovieTheaterTable
      Environment:
        Variables:
          MOVIES_TABLE:
            Ref: MyMovieTheaterTable
      Events:
        PutMovieInfo:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyMovieTheaterAPI
            Path: /register/persons
            Method: PUT
  MyMovieTheaterAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: movie-theater-api
      StageName: prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://lambda-cloudformation-lab/2d6be80369da1cf5bf7aecfea434fb7e
  MyMovieTheaterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: movie-theater-table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
